local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local mouse = player:GetMouse()

-- Constants for aiming, shooting, and feature enhancements
local LOW_ARC_HEIGHT = 50 -- studs above the rim
local HIGH_ARC_HEIGHT = 90 -- studs above the rim
local SHOOT_POWER_VALUES = {85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30} -- Power levels
local MIN_SHOOT_POWER = 25 -- Minimum power cap
local SHOOT_RANGE = 85 -- Maximum range to shoot effectively
local EXTRA_RANGE = 10 -- Additional range behind the line
local DEFAULT_WALKSPEED = 16 -- Default WalkSpeed

-- FPS Boost settings
local function fpsBoost()
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    game:GetService("Lighting").GlobalShadows = false
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and v:IsDescendantOf(workspace.CurrentCamera) == false then
            v.CastShadow = false
        end
    end
    print("FPS Boost enabled.")
end

-- Function for Self Pass
local function selfPass()
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid:MoveTo(character.HumanoidRootPart.Position + Vector3.new(0, -2, 0)) -- Drops the ball below the player
    end
end

-- Function to handle Sky Effects
local function applySkyEffect(skyColor)
    local sky = Instance.new("Sky", game:GetService("Lighting"))
    sky.SkyboxBk = skyColor
    sky.SkyboxDn = skyColor
    sky.SkyboxFt = skyColor
    sky.SkyboxLf = skyColor
    sky.SkyboxRt = skyColor
    sky.SkyboxUp = skyColor
    print("Sky effect applied.")
end

-- Function to enable invisibility
local function enableInvisibility()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") or part:IsA("Decal") then
            part.Transparency = 1
        end
    end
    print("Invisibility enabled.")
end

-- Function for Korblox leg
local function applyKorbloxLeg()
    local rightLeg = character:FindFirstChild("RightLeg") or character:FindFirstChild("RightUpperLeg")
    if rightLeg then
        rightLeg:Destroy()
        local fakeLeg = Instance.new("Part", character)
        fakeLeg.Size = Vector3.new(1, 2, 1)
        fakeLeg.BrickColor = BrickColor.new("Really black")
        fakeLeg.Material = Enum.Material.SmoothPlastic
        fakeLeg.Name = "KorbloxLeg"
        print("Korblox leg applied.")
    end
end

-- Function for long legs
local function applyLongLegs()
    for _, leg in pairs({"LeftLeg", "RightLeg", "LeftUpperLeg", "RightUpperLeg"}) do
        local part = character:FindFirstChild(leg)
        if part then
            part.Size = part.Size + Vector3.new(0, 3, 0)
        end
    end
    print("Long legs applied.")
end

-- Function to change walk speed
local function setWalkSpeed(value)
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = value
    end
end

-- Function to dynamically adjust the camera aim and shoot
local function adjustAimAndShoot(rimPosition)
    local distance = (character.HumanoidRootPart.Position - rimPosition).Magnitude
    if distance <= SHOOT_RANGE then
        local arcHeight = LOW_ARC_HEIGHT + (distance / SHOOT_RANGE) * (HIGH_ARC_HEIGHT - LOW_ARC_HEIGHT)
        local shootPower = math.clamp(SHOOT_POWER_VALUES[math.floor(distance / 10)], MIN_SHOOT_POWER, 100)
        
        -- Adjust camera for arc
        -- For example, adjust the camera's Field of View (FOV) dynamically based on distance
        game:GetService("Workspace").CurrentCamera.FieldOfView = math.clamp(90 + (distance / SHOOT_RANGE) * 10, 90, 120)

        -- Automatically shoot (this is a placeholder, implement auto-shoot mechanics as needed)
        print("Shooting with power: " .. shootPower)
    end
end

-- Main GUI Setup
local lib = lib or {}
lib:CreateWindow("Hoopz Enhancements")

-- Main Tab
local tab1 = lib:CreateTab("Main")

-- Aimbots Section
local sec1 = lib:CreateSection("Aimbots", tab1)

lib:CreateToggle("Low Arc Aimbot", tab1, false, function(state)
    if state then
        RunService.RenderStepped:Connect(function()
            local rimPosition = --[[ Obtain rim position dynamically ]]
            if (character.HumanoidRootPart.Position - rimPosition).Magnitude <= SHOOT_RANGE then
                adjustAimAndShoot(rimPosition)
            end
        end)
    end
end)

lib:CreateToggle("High Arc Aimbot", tab1, false, function(state)
    if state then
        RunService.RenderStepped:Connect(function()
            local rimPosition = --[[ Obtain rim position dynamically ]]
            if (character.HumanoidRootPart.Position - rimPosition).Magnitude <= SHOOT_RANGE then
                adjustAimAndShoot(rimPosition)
            end
        end)
    end
end)

-- Walkspeed Section
local sec2 = lib:CreateSection("Walkspeed", tab1)

lib:CreateSlider("WalkSpeed", tab1, DEFAULT_WALKSPEED, 16, 100, function(value)
    setWalkSpeed(value)
end)

-- Client-Sided Features Section
local sec3 = lib:CreateSection("Client-Sided Features", tab1)

lib:CreateToggle("Invisible", tab1, false, function(state)
    if state then enableInvisibility() end
end)

lib:CreateToggle("Korblox Leg", tab1, false, function(state)
    if state then applyKorbloxLeg() end
end)

lib:CreateToggle("Long Legs", tab1, false, function(state)
    if state then applyLongLegs() end
end)

-- Performance Section
local sec4 = lib:CreateSection("Performance", tab1)

lib:CreateToggle("FPS Boost", tab1, false, function(state)
    if state then fpsBoost() end
end)

-- Self Pass Section
local sec5 = lib:CreateSection("Self Pass", tab1)

lib:CreateToggle("Self Pass (Keybind: X)", tab1, false, function(state)
    if state then
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if input.KeyCode == Enum.KeyCode.X and not gameProcessed then
                selfPass()
            end
        end)
    end
end)

print("Hoopz Enhancements GUI with integrated advanced features loaded!")
